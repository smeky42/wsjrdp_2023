!!!
%html
%head

-title t('activerecord.header.map')
-if @access
  #main.row-fluid
    %div{:style => 'width:100%;'}
      #map{:style => 'width: 100%; height: 1200px;'}


    :javascript
        var markers = [];
        var map = null;
        var people =  #{raw @users};

        function createPin(person, f){
            var pers = toPersonObject(person)
            //console.log(pers.name + " " + pers.location)
            f(pers);
            return -1;
        }

        function createPinImage(person) {
            //console.log(person)
            var unitColor = getUnitColor(person);
            var pinIcon = (person.status ? "pin_star" : "pin"); // Accepted
            var pinColor = unitColor; // Unit
            var pinLetter = getLetterForPin(person); // Role
            var pinLetterColor = invertColor(unitColor); 
            var pinStarColor = getColorForPin(person);
            var pinImage = new google.maps.MarkerImage("https://chart.apis.google.com/chart?chst=d_map_xpin_letter&chld=" + pinIcon + "|" + pinLetter + "|" + pinColor + "|"+ pinLetterColor + "|" + pinStarColor,
              new google.maps.Size(21, 34),
              new google.maps.Point(0,0),
              new google.maps.Point(10, 34));
    
           return pinImage;
    
        }

        function getLetterForPin(person) {
            return person.role[0];
        }

       function getColorForPin(person) {
            if(person.status == "Dokumente vollständig überprüft") {
              return 'ffd700';
            }
            return 'ffffff';
        }

        function toPersonObject(personArray) {
            var person = new Object();
            // @users.push([id, name, latitude, longitude, role, link])
            person.id = personArray[0];
            person.name = personArray[1];
            person.location = {lat: parseFloat(personArray[2]), lng: parseFloat(personArray[3])};
            person.role = personArray[4];
            person.link = personArray[5];
            person.status = personArray[6];
            person.unit_color = personArray[7];
            person.unit_leader_id = personArray[8];
            return person;
        }

        function getUnitColor(person) {
          if(person.unit_color.length == 6) {
            return person.unit_color;
          }

          if(person.role[0] == "K") {
            person.unit_color = '8b0000';
            return person.unit_color;
          }

          if(person.role[0] == "I") {
            person.unit_color = '2f4f4f';
            return person.unit_color;
          }

          if(person.role[0] == "T") {
            if( person.unit_color == null || person.unit_color == "" ) {
              person.unit_color = findColorByUnitLeaderId(person.unit_leader_id); 
            } 
            return person.unit_color;
          }
          person.unit_color = 'ffffff'
          return person.unit_color;
        }

        function findColorByUnitLeaderId(id) {
          for (var i = 0; i < people.length; i++) {
            var person = toPersonObject(people[i])
            if (person.id == id && person.unit_color.length == 6) {
              return person.unit_color; 
            } 
          }
          return 'ffffff'
        }

        function initMap() {
            const germany = {lat: 51.1642, lng: 10.4541};
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 7,
                center: germany,
             });

            for (var i = 0; i < people.length; i++) {
                selPeople = people[i];
                createPin(selPeople, function(pers) {
                  markers.push(createMarker(pers));
                });
            };
          refreshColor();
        }

        function createMarker(pers){
          var marker = new google.maps.Marker({
                   map: map,
                   position: pers.location,
                   icon: createPinImage(pers),
                   id: pers.id,
                   role: pers.role,
                   person: pers,
                   unit_leader_id: pers.unit_leader_id 
                 });
      
                 var infowindow = new google.maps.InfoWindow({
                   content: pers.id + " - " + pers.link + "</br>" + 
                            pers.role + "</br>" 
                 });
                 marker.addListener('click', function() {
                   infowindow.open(map, marker);
                 });
          return marker;
        }

        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
          for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
          }
        }

        function showRole(name) {
          for (var i = 0; i < markers.length; i++) {
            if (markers[i].role == name) {
                markers[i].setMap(map);        
            }
          }
        }

        function hideRole(name) {
          for (var i = 0; i < markers.length; i++) {
            if (markers[i].role == name) {
                markers[i].setMap(null);
            }
          }
        }

        // Removes the markers from the map, but keeps them in the array.
        function clearMarkers() {
          setMapOnAll(null);
        }

        // Shows any markers currently in the array.
        function showMarkers() {
          setMapOnAll(map);
        }

        function setColor() {
          var person_id = $("#person_id").val();
          var color = $('#color').val();

          for (var i = 0; i < markers.length; i++) {
            if (markers[i].id == person_id || markers[i].unit_leader_id == person_id) {
                console.log("Marker Gefunden " + markers[i].person.name );
                markers[i].setMap(null);
                var pers = markers[i].person; 
                pers.unit_color = color; 
                markers[i] = createMarker(pers);
                markers[i].setMap(map);
            }
          }

            $.ajax({
              type: "POST",
              url: window.location +"/color",
              dataType: "json",
              data: {person_id: person_id, color: color},
              success: function(result) {
                console.log("Success: " + result.response)
              },
          });
          refreshColor();
        }
        function hideColor(color) {
        for (var i = 0; i < markers.length; i++) {
          if (markers[i].person.unit_color == color) {
              markers[i].setMap(null);
            }
          }
        } 

      function showColor(color) {
        for (var i = 0; i < markers.length; i++) {
          if (markers[i].person.unit_color == color) {
            markers[i].setMap(map);  
          }
        }
      }

      function invertColor(hex) {
            if (hex.indexOf('#') === 0) {
                hex = hex.slice(1);
            }
            // convert 3-digit hex to 6-digits.
            if (hex.length === 3) {
                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
            }
            if (hex.length !== 6) {
                return "000000";
                //throw new Error('Invalid HEX color.');
            }
            // invert color components
            var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),
                g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),
                b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);
            // pad each with zeros and return
            return padZero(r) + padZero(g) + padZero(b);
        }

        function padZero(str, len) {
            len = len || 2;
            var zeros = new Array(len).join('0');
            return (zeros + str).slice(-len);
        }

        function listUnit(color) {
            $( "#unitTable" ).empty();
            for (var i = 0; i < markers.length; i++) {
              if (markers[i].person.unit_color == color) {
                $( "#unitTable" ).append("<div style='margin:3px'>" + markers[i].person.role[0] + ": "  + markers[i].person.link +"</div>")
              }
            }
        }


        function refreshColor() {
          color = {};
          for (var i = 0; i < markers.length; i++) {
            var pers = markers[i].person; 
            //console.log(pers.name +  " - " + pers.unit_color);
             if (color[pers.unit_color] == null) {
                  color[pers.unit_color] = {"leader": 0, "member":0}
                } 

            if (pers.role[0] == "T") {
                if (color[pers.unit_color].member != null) {
                  color[pers.unit_color].member = color[pers.unit_color].member + 1;
                } else {
                  color[pers.unit_color].member = 1;
                } 
            } else {
                if (color[pers.unit_color].leader != null) {
                  color[pers.unit_color].leader = color[pers.unit_color].leader + 1;
                } else {
                  color[pers.unit_color].leader = 1;
                } 
            }
          }

          sortedColor = [];
          for (const [key, value] of Object.entries(color)) {
            sortedColor.push([key,value]);
          }
          sortedColor.sort(function(a, b) {
              var members = b[1].member - a[1].member;
              if(members == 0) {
                return b[1].leader - a[1].leader;
              }
              return members;
          });



          $( "#unitColorTable" ).empty();
          sortedColor.forEach(function(sortedColor){
            $( "#unitColorTable" ).append( `<div style="background-color:` + "#" + sortedColor[0] + ";color:#" + invertColor(sortedColor[0]) + 
              `;padding:20px;float:left;">${sortedColor[0]}<p> L: ${sortedColor[1].leader}, T: ${sortedColor[1].member}</p>`+
               `<p><button onclick="showColor('${sortedColor[0]}');">Show</button>` +
               `<button onclick="hideColor('${sortedColor[0]}');">Hide</button></p>` +
               `<p><button onclick="listUnit('${sortedColor[0]}');">List Unit</button></p>` +
              `</div>`);
          });

        }

        var mapScript = document.createElement("script");
        mapScript.src = "https://cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js";
        document.getElementsByTagName("head")[0].appendChild(mapScript)

        var mapScript = document.createElement("script");
        mapScript.src = "https://cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js";
        document.getElementsByTagName("head")[0].appendChild(mapScript)

        var mapScript = document.createElement("script");
        mapScript.src = "https://maps.google.com/maps/api/js?key=AIzaSyAPS-uHgTIug9RlK_wBotqn_hrMTkQeUVM&callback=initMap";
        document.getElementsByTagName("head")[0].appendChild(mapScript)


%input{:onclick =>"setColor();", :type=>"button", :value=>"Set Color", :class => "button"}
%input{:type=>"text", :id => "person_id",:maxlenght => "200" ,:class => "text_field" }
%input{:type=>"text", :id => "color",:maxlenght => "200" ,:class => "text_field" }
%br 
%br
%input{:onclick =>"clearMarkers();", :type=>"button", :value=>"Hide Markers"}
%input{:onclick =>"showMarkers();", :type=>"button", :value=>"Show Markers"}
%br 
- Settings.person.roles.each do |r|
  %input{:onclick =>"showRole('" + r + "');", :type=>"button", :value=>"Show " + r}
  %input{:onclick =>"hideRole('" + r + "');", :type=>"button", :value=>"Hide " + r}
%br
%br
%div{:style => "width:80%;float:left;"}
  %input{:onclick =>"refreshColor();", :type=>"button", :value=>"Refresh Unit Color Table"}
  %div{id: "unitColorTable"}
%br 
%div{:style => "width:100%; float:none;margin-left:10px;"}
  %div{id: "unitTable"}
%div{:style => "width:100%; float:none;"}
%br 
- if @invalid_users.present?
  =t('activerecord.text.invalid_adress')
  %br 
  - @invalid_users.each do |iu|
    %li= link_to raw(iu[2])
