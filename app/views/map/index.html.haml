!!!
%html
%head

-title t('activerecord.header.map')
-if @access
  #main.row-fluid
    %div{:style => 'width:100%;'}
      #map{:style => 'width: 100%; height: 1200px;'}


    :javascript
        var markers = [];
        var map = null;
        var people =  #{raw @users};

        function createPin(person, f){
            var pers = toPersonObject(person)
            //console.log(pers.name + " " + pers.location)
            f(pers);
            return -1;
        }

        function createPinImage(person) {
            //console.log(person)

            var pinIcon = (person.status ? "pin_star" : "pin"); // Accepted
            var pinColor = getUnitColor(person); // Unit
            var pinLetter = getLetterForPin(person); // Role
            var pinLetterColor = "daa520"; 
            var pinStarColor = 'ffffff';
            var pinImage = new google.maps.MarkerImage("https://chart.apis.google.com/chart?chst=d_map_xpin_letter&chld=" + pinIcon + "|" + pinLetter + "|" + pinColor + "|"+ pinLetterColor + "|" + pinStarColor,
              new google.maps.Size(21, 34),
              new google.maps.Point(0,0),
              new google.maps.Point(10, 34));
    
           return pinImage;
    
        }

        function getLetterForPin(person) {
            return person.role[0];
        }

        function toPersonObject(personArray) {
            var person = new Object();
            // @users.push([id, name, latitude, longitude, role, link])
            person.id = personArray[0];
            person.name = personArray[1];
            person.location = {lat: parseFloat(personArray[2]), lng: parseFloat(personArray[3])};
            person.role = personArray[4];
            person.link = personArray[5];
            person.status = personArray[6];
            person.unit_color = personArray[7];
            person.unit_leader_id = personArray[8];
            return person;
        }

        function getUnitColor(person) {
          if(person.unit_color.length == 6) {
            return person.unit_color;
          }

          if(person.role[0] == "K") {
            return '8b0000'
          }

          if(person.role[0] == "I") {
            return '2f4f4f'
          }

          if(person.role[0] == "T") {
            return findColorByUnitLeaderId(person.unit_leader_id);
          }

          return 'ffffff';
        }

        function findColorByUnitLeaderId(id) {
         for (var i = 0; i < people.length; i++) {
            var person = toPersonObject(people[i])
            if (person.id == id && person.unit_color.length == 6) {
              return person.unit_color; 
            } 
          }
          return 'ffffff'
        }

        function initMap() {
            const germany = {lat: 51.1642, lng: 10.4541};
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 7,
                center: germany,
             });

            
            //console.log("People " + people.length);

            for (var i = 0; i < people.length; i++) {
                selPeople = people[i];
                createPin(selPeople, function(pers) {
                 var marker = new google.maps.Marker({
                   map: map,
                   position: pers.location,
                   icon: createPinImage(pers),
                   id: pers.id,
                   role: pers.role,
                   person: pers,
                   unit_leader_id: pers.unit_leader_id 
                 });
      
                 var infowindow = new google.maps.InfoWindow({
                   content: pers.id + " - " + pers.link + "</br>" + 
                            pers.role + "</br>" 
                 });
                 marker.addListener('click', function() {
                   infowindow.open(map, marker);
                 });
                 markers.push(marker);
                });
            };

        }

        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
          for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
          }
        }

        function showRole(name) {
          for (var i = 0; i < markers.length; i++) {
            if (markers[i].role == name) {
                markers[i].setMap(map);        
            }
          }
        }

        function hideRole(name) {
          for (var i = 0; i < markers.length; i++) {
            if (markers[i].role == name) {
                markers[i].setMap(null);
            }
          }
        }

        // Removes the markers from the map, but keeps them in the array.
        function clearMarkers() {
          setMapOnAll(null);
        }

        // Shows any markers currently in the array.
        function showMarkers() {
          setMapOnAll(map);
        }

        function setColor() {
          var person_id = $("#person_id").val();
          var color = $('#color').val();

          for (var i = 0; i < markers.length; i++) {
            if (markers[i].id == person_id || markers[i].unit_leader_id == person_id) {
                console.log("Marker Gefunden " + markers[i].person.name );
                markers[i].setMap(null);
                var pers = markers[i].person; 
                pers.unit_color = color; 
                markers[i] = new google.maps.Marker({
                   map: map,
                   position: pers.location,
                   icon: createPinImage(pers),
                   id: pers.id,
                   role: pers.role,
                   person: pers, 
                   unit_leader_id: pers.unit_leader_id 
                 });
                markers[i].setMap(map);
            }
          }

            $.ajax({
              type: "POST",
              url: "http://localhost:3000/map/color",
              dataType: "json",
              data: {person_id: person_id, color: color},
              success: function(result) {
                console.log("Success: " + result.response)
              },
          });
        }




        var mapScript = document.createElement("script");
        mapScript.src = "https://cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js";
        document.getElementsByTagName("head")[0].appendChild(mapScript)

        var mapScript = document.createElement("script");
        mapScript.src = "https://cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js";
        document.getElementsByTagName("head")[0].appendChild(mapScript)

        var mapScript = document.createElement("script");
        mapScript.src = "https://maps.google.com/maps/api/js?key=AIzaSyAPS-uHgTIug9RlK_wBotqn_hrMTkQeUVM&callback=initMap";
        document.getElementsByTagName("head")[0].appendChild(mapScript)

      

%input{:onclick =>"setColor();", :type=>"button", :value=>"Set Color", :class => "button"}
%input{:type=>"text", :id => "person_id",:maxlenght => "200" ,:class => "text_field" }
%input{:type=>"text", :id => "color",:maxlenght => "200" ,:class => "text_field" }
%br 
%br
%input{:onclick =>"clearMarkers();", :type=>"button", :value=>"Hide Markers"}
%input{:onclick =>"showMarkers();", :type=>"button", :value=>"Show Markers"}
%br 
- Settings.person.roles.each do |r|
  %input{:onclick =>"showRole('" + r + "');", :type=>"button", :value=>"Show " + r}
  %input{:onclick =>"hideRole('" + r + "');", :type=>"button", :value=>"Hide " + r}
%br
- if @invalid_users.present?
  =t('activerecord.text.invalid_adress')
  %br 
  - @invalid_users.each do |iu|
    %li= link_to raw(iu[2])
